//https://github.com/kohsuke/github-api/blob/master/src/main/java/org/kohsuke/github/GHCommitState.java
// PENDING, SUCCESS, ERROR, FAILURE
def GHCS_PENDING=org.kohsuke.github.GHCommitState.PENDING
def GHCS_SUCCESS=org.kohsuke.github.GHCommitState.SUCCESS
def GHCS_ERROR=org.kohsuke.github.GHCommitState.ERROR

/*
properties([
  disableConcurrentBuilds(),
  parameters([
    string(name: 'REPO_REFSPEC', defaultValue: '+refs/pull/*:refs/remotes/origin/pr/*', description: 'clone refspec'),
    string(name: 'TARGET_BRANCH_NAME', defaultValue: 'refs/remotes/origin/pr/2/head', description: 'Target full ref branch name'),
    string(name: 'HEAD_SHA', defaultValue: '', description: ''),
    string(name: 'BASE_SHA', defaultValue: '', description: ''),
    string(name: 'REPO_HTML_URL', defaultValue: '', description: '')
  ]),
  pipelineTriggers([])
])
*/

def updateGithubCommitStatus(context, state, message) {
  //com.cloudbees.jenkins.GitHubRepositoryName.create(params.REPO_HTML_URL).resolve().each{ repo ->
  //  repo.createCommitStatus(params.HEAD_SHA, state, env.BUILD_URL, message, context)
  //}
  echo "check:'${context}'='${state}' -> ${message}"
}

try{
  node('master') {
    updateGithubCommitStatus('jenkins/ci', GHCS_PENDING, 'Build in progress')
    updateGithubCommitStatus('jenkins/qa/integration', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/cd/integration', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/qa/bdd/integration', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/cd/test', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/qa/smoke/test', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/qa/system/test', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/cd/production', GHCS_PENDING, 'Pending')
    updateGithubCommitStatus('jenkins/qa/smoke/production', GHCS_PENDING, 'Pending')
  }
  
  stage('build') {
      echo "Building..."
      echo "Something cool"
      echo "ping"
      echo "pong"
     echo "Hello"
    echo "how are you?"
  }
  
  node('master') {
    sleep 30
    updateGithubCommitStatus('jenkins/ci', GHCS_SUCCESS, 'Build complete')
    sleep 30
    updateGithubCommitStatus('jenkins/qa/integration', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/cd/integration', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/qa/bdd/integration', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/cd/test', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/qa/smoke/test', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/qa/system/test', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/cd/production', GHCS_SUCCESS, 'Done')
    sleep 30
    updateGithubCommitStatus('jenkins/qa/smoke/production', GHCS_SUCCESS, 'Done')
  }
}catch (exception) {
  def sw = new StringWriter()
  def pw = new PrintWriter(sw)
  exception.printStackTrace(pw)
  echo sw.toString()
  updateGithubCommitStatus('jenkins/ci', GHCS_ERROR, 'Build Error')
}
